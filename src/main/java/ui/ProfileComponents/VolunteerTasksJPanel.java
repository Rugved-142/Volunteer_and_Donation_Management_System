/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.ProfileComponents;

import DataConfiguration.Network;
import DataConfiguration.Organization;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.organization.VolunteerManagement.VolunteerProfile;
import model.organization.VolunteerManagement.VolunteerTask;
import model.organization.VolunteerManagement.VolunteerTaskStatus;

/**
 *
 * @author Sarthak
 */
public class VolunteerTasksJPanel extends javax.swing.JPanel {

    JPanel volunteerWorkArea;
    Network network;
    VolunteerProfile volunteerProfile;
    /**
     * Creates new form VolunteerTasksJPanel
     */
    public VolunteerTasksJPanel(JPanel volunteerWorkArea, Network network,VolunteerProfile volunteerProfile) {
        initComponents();
        this.volunteerWorkArea = volunteerWorkArea;
        this.network = network;
        this.volunteerProfile = volunteerProfile;
        populateTasksTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblVolunteerTasksInfo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnUpdateTaskStatus = new javax.swing.JButton();
        statusComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        tblVolunteerTasksInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tasks", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVolunteerTasksInfo);

        jLabel1.setFont(new java.awt.Font("Sora ExtraBold", 1, 18)); // NOI18N
        jLabel1.setText("TASKS:");

        btnUpdateTaskStatus.setBackground(new java.awt.Color(0, 153, 51));
        btnUpdateTaskStatus.setFont(new java.awt.Font("Sora Medium", 0, 12)); // NOI18N
        btnUpdateTaskStatus.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateTaskStatus.setText("Update Task Status");
        btnUpdateTaskStatus.setBorder(null);
        btnUpdateTaskStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTaskStatusActionPerformed(evt);
            }
        });

        statusComboBox.setFont(new java.awt.Font("Sora Medium", 0, 12)); // NOI18N
        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COMPLETED", "PENDING", "IN_PROGRESS" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdateTaskStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTaskStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateTaskStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTaskStatusActionPerformed
        // TODO add your handling code here:
        String updatedStatus = (String) statusComboBox.getSelectedItem();
        if(updatedStatus==null || updatedStatus.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Please select status", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedTask = tblVolunteerTasksInfo.getSelectedRow();
        if(selectedTask<0){
            JOptionPane.showMessageDialog(this, "Please select task", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        //Getting table model
        DefaultTableModel model = (DefaultTableModel) tblVolunteerTasksInfo.getModel();
        //Getting selected row from the table
        VolunteerTask selectedTaskRecord = (VolunteerTask) model.getValueAt(selectedTask,0);
        if(updatedStatus.equalsIgnoreCase(selectedTaskRecord.getStatus().toString()))
        {
            JOptionPane.showMessageDialog(this, "Updated status cannot be same as existing status", "Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(updatedStatus.equalsIgnoreCase(VolunteerTaskStatus.PENDING.toString()))
            selectedTaskRecord.setStatus(VolunteerTaskStatus.PENDING);
        else if(updatedStatus.equalsIgnoreCase(VolunteerTaskStatus.IN_PROGRESS.toString()))
            selectedTaskRecord.setStatus(VolunteerTaskStatus.IN_PROGRESS);
        else{
            selectedTaskRecord.setStatus(VolunteerTaskStatus.COMPLETED);
            volunteerProfile.removeTask(selectedTaskRecord);
            volunteerProfile.setTotalHours(volunteerProfile.getTotalHours()-4);
        }       
        
        JOptionPane.showMessageDialog(this, "Status updated successfully!", "Warning",JOptionPane.INFORMATION_MESSAGE);
        model.setRowCount(0);
        populateTasksTable();        
    }//GEN-LAST:event_btnUpdateTaskStatusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdateTaskStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JTable tblVolunteerTasksInfo;
    // End of variables declaration//GEN-END:variables

    private void populateTasksTable() {
        Organization org = network.getEnterpriseDirectory().findEnterprise("Non-Profit Enterprise").getOrganizationDirectory().findOrganization("Volunteer Management");
        org.getVolunteerDirectory().getVolunteerList();
        ArrayList<VolunteerProfile> volunteersList = org.getVolunteerDirectory().getVolunteerList();
        ArrayList<VolunteerTask> tasks = volunteerProfile.getTasks();
        if (volunteersList.isEmpty()) {
            return;
        }

        for (VolunteerTask vt : tasks) { 
                Object[] row = new Object[2];
                row[0] = vt;
                row[1] = vt.getStatus();                

                ((DefaultTableModel) tblVolunteerTasksInfo.getModel()).addRow(row);          

        }
    }
}

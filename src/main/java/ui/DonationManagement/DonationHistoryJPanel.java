/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.DonationManagement;

import DataConfiguration.Enterprise;
import DataConfiguration.Network;
import DataConfiguration.Organization;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.organization.DonationManagement.Donation;
import model.organization.DonationManagement.Donor;

/**
 *
 * @author sahar
 */
public class DonationHistoryJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network network;
    Donor donor;
    DefaultTableModel model;
    /**
     * Creates new form DonationHistory
     */
    public DonationHistoryJPanel(JPanel userProcessContainer, Network network, Donor donor) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.network = network;
        this.donor = donor;
        
        model = (DefaultTableModel) tblDonationHistory.getModel();
        populateTable();
    }
    
    private void populateTable(){
        model.setRowCount(0);
        Enterprise communityEnterprise = null;
        Organization donationOrg = null;
            
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getName().equals("Community Support Enterprise")) {
                    communityEnterprise = enterprise;
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org.getName().equals("Donation Management")) {
                            donationOrg = org;
                            break;
                        }
                    }
                    break;
                }
            }
            if (donationOrg != null) {
                List<Donation> donations = donationOrg.getDonationDirectory().getDonations();
                for(Donation donation: donations){
                    if(donation.getDonorName().equals(donor.getLoginName())){
                        Object[] row ={
                            donation.getDonationId(),
                            String.format("$%.2f", donation.getAmount()),
                            donation.getTimestamp().format(DateTimeFormatter.ofPattern("MM/dd/yyyy"))
                        };
                        model.addRow(row);
                    }
                }
            }
            
            addSummaryRow();
    }
    
    private void addSummaryRow(){
        double total = 0;
        for(int i=0;i<model.getRowCount(); i++){
            String amountStr = ((String) model.getValueAt(i, 1)).replace("$","");
            total += Double.parseDouble(amountStr);
        }
        model.addRow(new Object[]{
            "Total",
            String.format("$%.2f", total),
            ""
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDonationHistory = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        tblDonationHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "DonationID", "Donation Amount", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDonationHistory);

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Donaton History");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDonationHistory;
    // End of variables declaration//GEN-END:variables
}
